% Moves
move(state(middle, onbox, middle, hasnot), grasp, state(middle, onbox, middle, has)).
move(state(P, onfloor, P, H), climb, state(P, onbox, P, H)).
move(state(P1, onfloor, B, H), walk(P1, P2), state(P2, onfloor, B, H)) :-
    P1 \= P2.
move(state(P1, onfloor, P1, H), push(P1, P2), state(P2, onfloor, P2, H)) :-
    P1 \= P2.

% Goal: Monkey has the banana
canget(state(_, _, _, has), []).

% Recursive rule: try a move, then solve the rest
canget(State1, [Move|Moves]) :-
    move(State1, Move, State2),
    canget(State2, Moves).

query:    canget(State1, [Move|Moves]). 